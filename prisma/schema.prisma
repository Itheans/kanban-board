// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  boards       Board[]
  tasks        Task[]
  boardMembers BoardMember[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  columns Column[]
  tasks   Task[]
  members BoardMember[]

  @@map("boards")
}

model BoardMember {
  id      String @id @default(cuid())
  boardId String
  userId  String
  role    String @default("member")

  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([boardId, userId])
  @@map("board_members")
}

model Column {
  id      String @id @default(cuid())
  title   String
  order   Int
  boardId String

  board Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("columns")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  tags        String[]
  priority    String   @default("medium")
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  boardId  String
  columnId String
  assignee String?

  board  Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  column Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [assignee], references: [id])

  @@map("tasks")
}